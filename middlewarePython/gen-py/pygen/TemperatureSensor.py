#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import pygen.Device
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(pygen.Device.Iface):
    def changeAlarmTemperatureValue(self, id, alarmValue):
        """
        Parameters:
         - id
         - alarmValue

        """
        pass

    def getTemperature(self, id):
        """
        Parameters:
         - id

        """
        pass


class Client(pygen.Device.Client, Iface):
    def __init__(self, iprot, oprot=None):
        pygen.Device.Client.__init__(self, iprot, oprot)

    def changeAlarmTemperatureValue(self, id, alarmValue):
        """
        Parameters:
         - id
         - alarmValue

        """
        self.send_changeAlarmTemperatureValue(id, alarmValue)
        return self.recv_changeAlarmTemperatureValue()

    def send_changeAlarmTemperatureValue(self, id, alarmValue):
        self._oprot.writeMessageBegin('changeAlarmTemperatureValue', TMessageType.CALL, self._seqid)
        args = changeAlarmTemperatureValue_args()
        args.id = id
        args.alarmValue = alarmValue
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_changeAlarmTemperatureValue(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = changeAlarmTemperatureValue_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.invalidArgs is not None:
            raise result.invalidArgs
        raise TApplicationException(TApplicationException.MISSING_RESULT, "changeAlarmTemperatureValue failed: unknown result")

    def getTemperature(self, id):
        """
        Parameters:
         - id

        """
        self.send_getTemperature(id)
        return self.recv_getTemperature()

    def send_getTemperature(self, id):
        self._oprot.writeMessageBegin('getTemperature', TMessageType.CALL, self._seqid)
        args = getTemperature_args()
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getTemperature(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getTemperature_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.invalidArgs is not None:
            raise result.invalidArgs
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getTemperature failed: unknown result")


class Processor(pygen.Device.Processor, Iface, TProcessor):
    def __init__(self, handler):
        pygen.Device.Processor.__init__(self, handler)
        self._processMap["changeAlarmTemperatureValue"] = Processor.process_changeAlarmTemperatureValue
        self._processMap["getTemperature"] = Processor.process_getTemperature
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_changeAlarmTemperatureValue(self, seqid, iprot, oprot):
        args = changeAlarmTemperatureValue_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = changeAlarmTemperatureValue_result()
        try:
            result.success = self._handler.changeAlarmTemperatureValue(args.id, args.alarmValue)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidArguments as invalidArgs:
            msg_type = TMessageType.REPLY
            result.invalidArgs = invalidArgs
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("changeAlarmTemperatureValue", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getTemperature(self, seqid, iprot, oprot):
        args = getTemperature_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getTemperature_result()
        try:
            result.success = self._handler.getTemperature(args.id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidArguments as invalidArgs:
            msg_type = TMessageType.REPLY
            result.invalidArgs = invalidArgs
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getTemperature", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class changeAlarmTemperatureValue_args(object):
    """
    Attributes:
     - id
     - alarmValue

    """


    def __init__(self, id=None, alarmValue=None,):
        self.id = id
        self.alarmValue = alarmValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.alarmValue = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('changeAlarmTemperatureValue_args')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.alarmValue is not None:
            oprot.writeFieldBegin('alarmValue', TType.I32, 2)
            oprot.writeI32(self.alarmValue)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(changeAlarmTemperatureValue_args)
changeAlarmTemperatureValue_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'alarmValue', None, None, ),  # 2
)


class changeAlarmTemperatureValue_result(object):
    """
    Attributes:
     - success
     - invalidArgs

    """


    def __init__(self, success=None, invalidArgs=None,):
        self.success = success
        self.invalidArgs = invalidArgs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Status()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.invalidArgs = InvalidArguments()
                    self.invalidArgs.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('changeAlarmTemperatureValue_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.invalidArgs is not None:
            oprot.writeFieldBegin('invalidArgs', TType.STRUCT, 1)
            self.invalidArgs.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(changeAlarmTemperatureValue_result)
changeAlarmTemperatureValue_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Status, None], None, ),  # 0
    (1, TType.STRUCT, 'invalidArgs', [InvalidArguments, None], None, ),  # 1
)


class getTemperature_args(object):
    """
    Attributes:
     - id

    """


    def __init__(self, id=None,):
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getTemperature_args')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getTemperature_args)
getTemperature_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
)


class getTemperature_result(object):
    """
    Attributes:
     - success
     - invalidArgs

    """


    def __init__(self, success=None, invalidArgs=None,):
        self.success = success
        self.invalidArgs = invalidArgs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.invalidArgs = InvalidArguments()
                    self.invalidArgs.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getTemperature_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.invalidArgs is not None:
            oprot.writeFieldBegin('invalidArgs', TType.STRUCT, 1)
            self.invalidArgs.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getTemperature_result)
getTemperature_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'invalidArgs', [InvalidArguments, None], None, ),  # 1
)
fix_spec(all_structs)
del all_structs

